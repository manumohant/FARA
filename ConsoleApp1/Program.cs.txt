using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;

namespace ConsoleApp1
{
    class Program
    {
        public static List<Data> NewDataSet = new List<Data> { new Data { Id= "{1d22ea11-1e32-424e-89ab-9fedbadb6ce1}", AnalystLegacy="Test",CreatedBy="Test",InHouseCouncil="Test",Title="Test" } };
        static void Main(string[] args)
        {
            var filterNameList = new List<string> { "Analyst_x0020__x0028_Legacy_x002", "Created_x0020_By_x0020__x0028_Le", "In_x002d_House_x0020_Council_x00", "ID", "Title" };

            XmlDocument doc = new XmlDocument();


            string oldUrl = "http://intranet-old/legal/_vti_bin/Lists.asmx";
            const string listName = "NDA Log"; // "{BDE7884E-9056-48DD-A6D9-9D54CED47A85}";// "NDA Log";

            var client = new ListServiceProxy.ListsSoapClient("ListsSoap", oldUrl);
            var query = new XElement("Query", "");
            var viewFields = new XElement("ViewFields", "");
            var queryOptions = new XElement("QueryOptions", "");

            try
            {
                //var result = File.ReadAllText("XMLFile1.xml");
                var result = client.GetList(listName);
                doc.LoadXml(result);

                string jsonText = JsonConvert.SerializeXmlNode(doc, Newtonsoft.Json.Formatting.None, true);
                var data = JsonConvert.DeserializeObject<Respose>(jsonText);
                var filteredList = data.Fields.Field.Where(p => filterNameList.Contains(p.Name));


                foreach(var newData in NewDataSet)
                {
                    var matchInOld = filteredList.Where(p => p.Id == newData.Id);
                    if (matchInOld.Any())
                    {
                        // update all values here;;;
                        newData.AnalystLegacy = filteredList.FirstOrDefault(p => p.Name == "Analyst_x0020__x0028_Legacy_x002").Value;
                    }
                }

            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
                throw;
            }

        }
    }
    class Data
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public string AnalystLegacy { get; set; }
        public string CreatedBy { get; set; }
        public string InHouseCouncil { get; set; }
    }
    class Respose
    {
        public Fields Fields { get; set; } 
    }
    class Fields
    {
       public List<Field> Field { get; set; }
    }
    class Field
    {
        [JsonProperty("@Name")]
        public string Name { get; set; }
        [JsonProperty("@Id")]
        public string Id { get; set; }
        [JsonProperty("@ColName")]
        public string ColName { get; set; }
        [JsonProperty("@StaticName")]
        public string StaticName { get; set; }
        [JsonProperty("@Type")]
        public string Type { get; set; }
        public string Value { get; set; }
    }
}

